#!/bin/zsh

# VSCode Extension Profile Manager
# Manages extensions across different VSCode profiles

# Configuration
CONFIG_DIR="$HOME/.scripts-data"
PROFILES_FILE="$CONFIG_DIR/vscode-profiles"
BASE_PROFILE="Base"

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Initialize profiles file if it doesn't exist
if [[ ! -f "$PROFILES_FILE" ]]; then
    touch "$PROFILES_FILE"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if VSCode is available
check_vscode() {
    if ! command -v code &> /dev/null; then
        log_error "VSCode CLI 'code' not found. Please ensure VSCode is installed and 'code' is in your PATH."
        exit 1
    fi
}

# Get list of extensions for a profile
get_extensions() {
    local profile="$1"
    code --profile "$profile" --list-extensions 2>/dev/null || true
}

# Check if extension exists in profile
extension_exists() {
    local profile="$1"
    local extension="$2"
    local extensions=$(get_extensions "$profile")
    echo "$extensions" | grep -q "^$extension$"
}

# Add extension to base profile
add_base_extension() {
    local ext_name="$1"
    
    if [[ -z "$ext_name" ]]; then
        log_error "Extension name is required"
        return 1
    fi
    
    log_info "Installing extension '$ext_name' to Base profile..."
    
    if code --profile "$BASE_PROFILE" --install-extension "$ext_name"; then
        log_success "Extension '$ext_name' installed to Base profile"
    else
        log_error "Failed to install extension '$ext_name' to Base profile"
        return 1
    fi
}

# Remove extension from base profile
remove_base_extension() {
    local ext_name="$1"
    
    if [[ -z "$ext_name" ]]; then
        log_error "Extension name is required"
        return 1
    fi
    
    log_info "Uninstalling extension '$ext_name' from Base profile..."
    
    if code --profile "$BASE_PROFILE" --uninstall-extension "$ext_name"; then
        log_success "Extension '$ext_name' uninstalled from Base profile"
    else
        log_error "Failed to uninstall extension '$ext_name' from Base profile"
        return 1
    fi
}

# Sync base extensions to all profiles
sync_extensions() {
    local base_exts=($(get_extensions "$BASE_PROFILE"))
    
    if [[ ${#base_exts[@]} -eq 0 ]]; then
        log_warning "No extensions found in Base profile"
        return 0
    fi
    
    log_info "Found ${#base_exts[@]} extensions in Base profile"
    
    # Read profiles from config file
    if [[ ! -s "$PROFILES_FILE" ]]; then
        log_warning "No profiles configured in $PROFILES_FILE"
        return 0
    fi
    
    while IFS= read -r profile; do
        # Skip empty lines and comments
        [[ -z "$profile" || "$profile" =~ ^[[:space:]]*# ]] && continue
        
        # Skip Base profile
        [[ "$profile" == "$BASE_PROFILE" ]] && continue
        
        log_info "Syncing extensions to profile '$profile'..."
        
        local prof_exts=($(get_extensions "$profile"))
        local installed_count=0
        
        for ext in "${base_exts[@]}"; do
            if ! extension_exists "$profile" "$ext"; then
                log_info "  Installing '$ext' to '$profile'..."
                if code --profile "$profile" --install-extension "$ext" &>/dev/null; then
                    ((installed_count++))
                else
                    log_warning "  Failed to install '$ext' to '$profile'"
                fi
            fi
        done
        
        if [[ $installed_count -gt 0 ]]; then
            log_success "Installed $installed_count new extensions to '$profile'"
        else
            log_info "Profile '$profile' already up to date"
        fi
        
    done < "$PROFILES_FILE"
}

# Add profile to config file
add_profile() {
    local profile_name="$1"
    
    if [[ -z "$profile_name" ]]; then
        log_error "Profile name is required"
        return 1
    fi
    
    # Check if profile already exists
    if grep -q "^$profile_name$" "$PROFILES_FILE" 2>/dev/null; then
        log_warning "Profile '$profile_name' already exists in configuration"
        return 0
    fi
    
    echo "$profile_name" >> "$PROFILES_FILE"
    log_success "Added profile '$profile_name' to configuration"
}

# List configured profiles
list_profiles() {
    log_info "Configured profiles:"
    if [[ -s "$PROFILES_FILE" ]]; then
        while IFS= read -r profile; do
            [[ -z "$profile" || "$profile" =~ ^[[:space:]]*# ]] && continue
            echo "  - $profile"
        done < "$PROFILES_FILE"
    else
        echo "  (none configured)"
    fi
}

# Remove profile from config file
remove_profile() {
    local profile_name="$1"
    
    if [[ -z "$profile_name" ]]; then
        log_error "Profile name is required"
        return 1
    fi
    
    if ! grep -q "^$profile_name$" "$PROFILES_FILE" 2>/dev/null; then
        log_warning "Profile '$profile_name' not found in configuration"
        return 0
    fi
    
    # Create temporary file without the profile
    grep -v "^$profile_name$" "$PROFILES_FILE" > "$PROFILES_FILE.tmp" && mv "$PROFILES_FILE.tmp" "$PROFILES_FILE"
    log_success "Removed profile '$profile_name' from configuration"
}

# Show usage information
show_usage() {
    cat << EOF
VSCode Extension Profile Manager

Usage: vscode <command> [arguments]

Commands:
  ext add-base <ext-name>     Install extension to Base profile
  ext rm-base <ext-name>      Uninstall extension from Base profile
  ext sync                    Sync Base extensions to all configured profiles

  profiles add <profile-name> Add profile to configuration
  profiles list               List configured profiles
  profiles rm <profile-name>  Remove profile from configuration

  help                        Show this help message

Configuration:
  Profiles are stored in: $PROFILES_FILE

Examples:
  vscode ext add-base ms-python.python
  vscode ext rm-base ms-python.python
  vscode ext sync
  vscode profiles add Development
  vscode profiles list
  vscode profiles rm Development

EOF
}

# Main function
main() {
    check_vscode
    
    case "${1:-}" in
        "ext")
            case "${2:-}" in
                "add-base")
                    add_base_extension "$3"
                ;;
                "rm-base")
                    remove_base_extension "$3"
                ;;
                "sync")
                    sync_extensions
                ;;
                *)
                    log_error "Unknown ext command: ${2:-}"
                    show_usage
                    exit 1
                ;;
            esac
        ;;
        "profiles")
            case "${2:-}" in
                "add")
                    add_profile "$3"
                ;;
                "list")
                    list_profiles
                ;;
                "rm")
                    remove_profile "$3"
                ;;
                *)
                    log_error "Unknown profiles command: ${2:-}"
                    show_usage
                    exit 1
                ;;
            esac
        ;;
        "help"|"--help"|"-h")
            show_usage
        ;;
        "")
            show_usage
        ;;
        *)
            log_error "Unknown command: $1"
            show_usage
            exit 1
        ;;
    esac
}

# Run main function with all arguments
main "$@"
